

##################################################
INPUT CODE:
##################################################

/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#include <iterator>
#include <memory>
#include <vector>

#include "tensorflow/core/common_runtime/device_mgr.h"
#include "tensorflow/core/common_runtime/local_device.h"
#include "tensorflow/core/framework/device_attributes.pb.h"
#include "tensorflow/core/lib/core/errors.h"
#include "tensorflow/core/platform/logging.h"
#include "tensorflow/core/util/device_name_utils.h"

namespace tensorflow {

DynamicDeviceMgr::~DynamicDeviceMgr() {
  // Release resources ahead of destroying the device manager as the resource
  // destructors (e.g. ~IteratorResource) assume devices still exist.
  for (auto& pair : dynamic_devices_) {
    pair.first->ClearResourceMgr();
  }
}

void DynamicDeviceMgr::ListDeviceAttributes(
    std::vector<DeviceAttributes>* devices) const {
  tf_shared_lock l(devices_mu_);
  devices->reserve(dynamic_devices_.size());
  for (const auto& pair : dynamic_devices_) {
    devices->emplace_back(pair.first->attributes());
  }
}

std::vector<Device*> DynamicDeviceMgr::ListDevices() const {
  tf_shared_lock l(devices_mu_);
  std::vector<Device*> devices;
  devices.reserve(dynamic_devices_.size());
  for (const auto& pair : dynamic_devices_) {
    devices.emplace_back(pair.first);
  }
  return devices;
}

string DynamicDeviceMgr::DebugString() const {
  string out;
  tf_shared_lock l(devices_mu_);
  for (const auto& pair : dynamic_devices_) {
    strings::StrAppend(&out, pair.first->name(), "\n");
  }
  return out;
}

string DynamicDeviceMgr::DeviceMappingString() const {
  string out;
  tf_shared_lock l(devices_mu_);
  for (const auto& pair : dynamic_devices_) {
    if (!pair.first->attributes().physical_device_desc().empty()) {
      strings::StrAppend(&out, pair.first->name(), " -> ",
                         pair.first->attributes().physical_device_desc(), "\n");
    }
  }
  return out;
}

Status DynamicDeviceMgr::LookupDevice(StringPiece name, Device** device) const {

##################################################
AUTOGENERATED CODE:
##################################################


  return DeviceLookupUtils::LookupDevice(name, device, &device);
}

void DynamicDeviceMgr::SetDeviceName(StringPiece device_name,
                                          Device* device) const {
  Device* device_;
  Device* device = new Device;

  // If device is empty, we need to return an empty string, so that we can
  // retrieve the device's metadata and get the name from the device manager.
  string metadata;
  TF_RETURN_IF_ERROR(device_->LookupDevice(name, &metadata));

  // We need to set this device name to the name we want, so that we can
  // retrieve the device's metadata and get the name from the

##################################################
ACTUAL CODE:
##################################################


  tf_shared_lock l(devices_mu_);
  auto iter = device_map_.find(string(name));
  if (iter == device_map_.end()) {
    std::vector<StringPiece> device_names;
    for (auto&& itr : device_map_) {
      device_names.push_back(itr.first);
    }
    VLOG(1) << "Unknown device: " << name
            << " all devices: " << absl::StrJoin(device_names, ", ");
    return errors::InvalidArgument(name, " unknown device.");
  }
  *device = iter->second;
  return Status::OK();
}

void DynamicDeviceMgr::ClearContainers(
    g